@tool
class_name GaeaGenerator2D
extends GaeaGenerator

## Used to transform a world position into a map position,
## mainly used by the [ChunkLoader]. May also be used by
## a [GaeaRenderer]. Otherwise doesn't affect generation.
@export var tile_size: Vector2i = Vector2i(16, 16)
## Sets the generator to be used for the next pass. This generates a new grid on top of the one
## generated by this one.[br][br]
## If you're using a [GaeaRenderer], set its [param generator] to the last generator in the chain.[br]
## If you're using a [ChunkLoader2D], set its [param generator] to the first one.[br][br]
## [b]Note:[/b] Using modifiers instead of multiple generators is recommended. Only chain generators if necessary.
@export var next_pass: GaeaGenerator2D

var tile_pool:Array[TilemapTileInfo]

func _ready() -> void:
	grid = GaeaGrid2D.new()
	super()


## Returns the [GaeaGrid2D] resource handling this generator's grid.
func get_grid() -> GaeaGrid2D:
	if not is_instance_valid(grid):
		grid = GaeaGrid2D.new()
	return grid


## Returns the map coordinates of the cell containing the given [param global_position].
func global_to_map(pos: Vector2) -> Vector2i:
	return (pos / Vector2(tile_size)).floor()


## Returns the global position of the cell at the given [param map_position].
func map_to_global(map_position: Vector2i) -> Vector2:
	return Vector2(map_position * tile_size)
